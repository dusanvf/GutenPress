{
  "name": "GutenPress",
  "tagline": "An OOP toolset for WordPress",
  "body": "# GutenPress\r\n\r\nAn OOP toolset for WordPress.\r\n\r\nAt the moment, **GutenPress** it's a rough-draft for a bunch of tools for developing themes or plugins for WordPress.\r\n\r\nCurrently working:\r\n\r\n* A post type generator GUI that creates new custom post types as plugins\r\n* A custom taxonomy generator GUI that creates... well.. custom taxonomies\r\n* A set of metabox generator classes to add custom meta data to generated custom post types\r\n* A completely extendable Forms class that integrates well with WordPress, and it's actually used within GutenPress for GUI and metaboxes\r\n* An extendable wrapper class for WP_Query that returns instances of custom post type objects wrapped on an extendable custom class, so you can customize the post-like objects to your needs\r\n\r\n## Installation\r\n\r\n* Download the [master archive](https://github.com/felipelavinz/GutenPress/archive/master.zip) and extract into `wp-content/mu-plugins/`\r\n* You'll need PHP 5.3 or greater, since GutenPress uses namespacing to lazy-load whenever's possible\r\n\r\n## Usage\r\n\r\n### Custom Post Type generator\r\n\r\n* A new sub-menu it's added to the **Tools** admin menu.\r\n* Carefully fill the form and select the required options to configure your new custom post type.\r\n* On submit, a new folder will be created on your plugins folder; you'll be redirected to the plugins management so you can activate the new CPT\r\n* The plugin activation will add the relevant permissions to the admin user\r\n* If you need to add permissions for other groups, check the [Members](http://wordpress.org/extend/plugins/members/) plugin by Justin Tadlock\r\n* The generated plugin consists of three classes:\r\n  * A custom post type definition that extends \\GutenPress\\Model\\PostType\r\n  * A custom query class that extends \\GutenPress\\Model\\PostQuery, a wrapper for WP_Query that implements the Iterator interface\r\n  * A custom object class that extends \\GutenPress\\Model\\PostObject, a wrapper for WP_Post that you can extend with custom methods\r\n\r\n### Using the custom query class\r\n\r\nLet's suppose we just created a **Songs** custom post type.\r\n\r\nGetting a list of songs works just like directly calling WP_Query, so you can use all the arguments you could use with it, including tax queries and meta queries:\r\n\r\n```php\r\n$latest_songs = new SongsQuery( array(\r\n\t'posts_per_page' => '10',\r\n\t'tax_query' => array(\r\n\t\tarray(\r\n\t\t\t'taxonomy' => 'performed_by',\r\n\t\t\t'terms' => 'pink-floyd',\r\n\t\t\t'field' => 'slug'\r\n\t\t)\r\n\t),\r\n\t'meta_query' => array(\r\n\t\tarray(\r\n\t\t\t'key' => 'author_composer',\r\n\t\t\t'value' => 'David Gilmour'\r\n\t\t)\r\n\t)\r\n) );\r\n```\r\n\r\nSince *SongsQuery* (or whatever your generated CPT class is called) implements the Iterator interface, you can loop through the objects with a simple `foreach`. It also implements the Countable interface, so you can check if your query actually has items:\r\n\r\n```php\r\nif ( count($latest_songs) ) :\r\n\tforeach ( $latest_songs as $song ) :\r\n\t\t// do stuff\r\n\t\t// each $song will be an instance of SongObject\r\n\t\techo $song->authors;\r\n\tendforeach;\r\nendif;\r\n```\r\n\r\n### Using and extending custom post type objects\r\n\r\nYou can extend your \"Object\" class to add custom methods around WP_Post:\r\n\r\n```php\r\nclass SongObject extends \\GutenPress\\Model\\PostObject{\r\n\tpublic function getAuthors(){\r\n\t\t$composer = $this->post->author_composer;\r\n\t\t$lyrics   = $this->post->author_lyrics;\r\n\t\tif ( $composer === $lyrics ) {\r\n\t\t\treturn 'Music and Lyrics by '. $lyrics;\r\n\t\t} else {\r\n\t\t\treturn 'Music: '. $composer .' / Lyrics: '. $lyrics;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * You can also overwrite the __get() magic method\r\n\t */\r\n\tpublic function __get( $key ){\r\n\t\tif ( $key === 'authors' ) {\r\n\t\t\treturn $this->getAuthors();\r\n\t\t}\r\n\t\t// pass it on to WP_Post\r\n\t\tparent::__get( $key );\r\n\t}\r\n}\r\n```\r\n\r\n### Adding metaboxes\r\n\r\nYou can use the \\GutenPress\\Model\\PostMeta class to add a metabox to your CPT:\r\n\r\n```php\r\n// using the \\GutenPress\\Model namespace as Model;\r\nclass SongAuthors extends Model\\PostMeta{\r\n\tprotected function setId(){\r\n\t\t// will be used for the metabox ID\r\n\t\t// will be prepended to the metadata defined by this class\r\n\t\treturn 'author';\r\n\t}\r\n\tprotected function setDataModel(){\r\n\t\treturn array(\r\n\t\t\tnew Model\\PostMetaData(\r\n\t\t\t\t'composer',\r\n\t\t\t\t'Composer',\r\n\t\t\t\t'\\GutenPress\\Forms\\Element\\InputText', // can be any of the Elements defined on the corresponding folder\r\n\t\t\t\tarray(\r\n\t\t\t\t\t'placeholder' => 'Who composed the music for this song?'\r\n\t\t\t\t)\r\n\t\t\t),\r\n\t\t\tnew Model\\PostMetaData(\r\n\t\t\t\t'lyrics',\r\n\t\t\t\t'Lyrics',\r\n\t\t\t\t'\\GutenPress\\Forms\\Element\\InputText',\r\n\t\t\t\tarray(\r\n\t\t\t\t\t'placeholder' => 'Who wrote the lyrics?'\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// finally, register as metabox\r\nnew Model\\Metabox( 'SongAuthors', 'Authorship information', 'song', array('priority' => 'high') );\r\n```\r\n",
  "google": "UA-93087-16",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}